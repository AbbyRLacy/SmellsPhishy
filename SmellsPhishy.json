{"files":[{"id":"58295fec-a180-45aa-bd9c-9d1d6ec2c660","name":"Code","type":"server_js","source":" /**\n * Copyright Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns the array of cards that should be rendered for the current\n * e-mail thread. The name of this function is specified in the\n * manifest \u0027onTriggerFunction\u0027 field, indicating that this function\n * runs every time the add-on is started.\n *\n * @param {Object} e The data provided by the Gmail UI.\n * @return {Card[]}\n */\n\nfunction defineGlobals(){\n  \n  PropertiesService.getScriptProperties().deleteAllProperties();\n  \n  PropertiesService.getScriptProperties().setProperty(\u0027filterLightSetting\u0027, \u0027false\u0027);\n  PropertiesService.getScriptProperties().setProperty(\u0027filterMediumSetting\u0027, \u0027false\u0027);\n  PropertiesService.getScriptProperties().setProperty(\u0027filterStrictSetting\u0027, \u0027false\u0027);\n  \n\n  \n}\n\nfunction buildAddOn(e) {\n  // Activate temporary Gmail add-on scopes.\n  //var accessToken \u003d e.messageMetadata.accessToken;\n  //GmailApp.setCurrentMessageAccessToken(accessToken);\n\n // var messageId \u003d e.messageMetadata.messageId;\n  //var message \u003d GmailApp.getMessageById(messageId);\n\n\n  //Get user\u0027s email contents\n  var thread \u003d GmailApp.getInboxThreads(0,1)[0]; // Get first thread in inbox\n  var messageContent \u003d thread.getMessages()[0]; // Get first message\n  var messageContentBody \u003d messageContent.getPlainBody();\n  //Logger.log(message.getBody()); // Log contents of the body\n  \n  \n  // Get user and thread labels as arrays to enable quick sorting and indexing.\n  var threadLabels \u003d thread.getLabels();\n  var labels \u003d getLabelArray(GmailApp.getUserLabels());\n  var labelsInUse \u003d getLabelArray(threadLabels);\n  \n  \n  //var riskLabel \u003d GmailApp.getUserLabelByName(\"100% RISK OF PHISHING ATTEMPT\")\n  //add risk label to the current thread\n  //riskLabel.addToThread(thread);\n  //thread.addLabel(riskLabel);\n  \n  //var label \u003d GmailApp.getUserLabelByName(\"100% Risk\");\n // var firstThread \u003d GmailApp.getInboxThreads(0,1)[0];\n  //firstThread.addLabel(label);\n  \n  \n  \n  \n  \n  // start of user settings\n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  // Create a section for that contains all user Labels.\n  var section \u003d CardService.newCardSection()\n      .setHeader(\"\u003cfont color\u003d\\\"#1257e0\\\"\u003e\u003cb\u003eSelect a Filter to Apply to Recent Emails\u003c/b\u003e\u003c/font\u003e\");\n  \n  \n  \n  var clearAction \u003d CardService.newAction().setFunctionName(\u0027RemoveAllLabels\u0027);\n  var button4 \u003d CardService.newTextButton().setText(\u0027Remove all previously added Labels\u0027).setOnClickAction(clearAction);\n  \n  var textInput1 \u003d CardService.newTextInput()\n    .setFieldName(\"text_input_form_input_key\")\n    .setTitle(\"Text input title\")\n    .setHint(\"#\");\n  \n  var textInput1 \u003d CardService.newTextInput()\n    .setFieldName(\"text_input_form_input_key\")\n    .setTitle(\"Text input title\")\n    .setHint(\"#\");\n  \n  \n  \n  \n  \n  \n  var action1 \u003d CardService.newAction().setFunctionName(\u0027filterLightClick\u0027);\n  var action2 \u003d CardService.newAction().setFunctionName(\u0027filterMediumClick\u0027);\n  var action3 \u003d CardService.newAction().setFunctionName(\u0027filterStrictClick\u0027);\n  \n  \n  var button1 \u003d CardService.newTextButton().setText(\u0027Light\u0027).setOnClickAction(action1);\n  var button2 \u003d CardService.newTextButton().setText(\u0027Medium\u0027).setOnClickAction(action2);\n  var button3 \u003d CardService.newTextButton().setText(\u0027Strict\u0027).setOnClickAction(action3);\n  \n  \n  var textParagraph1 \u003d CardService.newTextParagraph()\n    .setText(\"Selecting a Filter Setting once will automatically filter all future incoming emails.\");\n  \n\n// ...\n\n \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  // Create a checkbox group for user labels that are added to prior section.\n  var checkboxGroup \u003d CardService.newSelectionInput()\n    .setType(CardService.SelectionInputType.CHECK_BOX)\n    .setFieldName(\u0027labels\u0027)\n    .setOnChangeAction(CardService.newAction().setFunctionName(\u0027toggleLabel\u0027));\n  \n  \n\n  // Add checkbox with name and selected value for each User Label.\n  for(var i \u003d 0; i \u003c labels.length; i++) {\n    checkboxGroup.addItem(labels[i], labels[i], labelsInUse.indexOf(labels[i])!\u003d -1);\n  }\n\n  // Add the checkbox group to the section.\n  //section.addWidget(checkboxGroup);\n  section.addWidget(button4)\n  section.addWidget(button1);\n  section.addWidget(button2);\n  section.addWidget(button3);\n  section.addWidget(textParagraph1);\n  //emailContentSection.addWidget(contentGroup);\n\n  // Build the main card after adding the section.\n  var card \u003d CardService.newCardBuilder()\n    .setHeader(CardService.newCardHeader()\n    .setTitle(\u0027SmellsPhishy\u0027)\n    .setImageUrl(\u0027https://www.seton.net.au/media/catalog/product/cache/2/image/9df78eab33525d08d6e5fb8d27136e95/S/8/S8020.jpg\u0027))\n    .addSection(section) \n    .build();\n\n  return [card];\n} \n\n//send a notifcation to the user\nfunction notificationCallback() {\n  return CardService.newActionResponseBuilder()\n      .setNotification(CardService.newNotification()\n          .setText(\"Some info to display to user\"))\n      .build();\n}\n\n\n\nfunction filterLightClick(){\n\n  defineGlobals();\n  PropertiesService.getScriptProperties().setProperty(\u0027filterLightSetting\u0027, \u0027true\u0027);\n  \n  Logger.log(PropertiesService.getScriptProperties().getProperty(\u0027filterLightSetting\u0027));\n  \n\n  FilterLight();\n  \n\n}\n\nfunction filterMediumClick(){\n  \n    defineGlobals();\n    PropertiesService.getScriptProperties().setProperty(\u0027filterMediumSetting\u0027, \u0027true\u0027);\n  \n  \n  \n    FilterMedium();\n\n  \n  \n    return CardService.newActionResponseBuilder()\n      .setNotification(CardService.newNotification()\n          .setText(\"Filtering Complete\"))\n      .build();\n}\n\nfunction filterStrictClick(){\n\n\n  defineGlobals();\n  PropertiesService.getScriptProperties().setProperty(\u0027filterStrictSetting\u0027, \u0027true\u0027);\n  \n  \n  FilterStrict();\n\n    return CardService.newActionResponseBuilder()\n      .setNotification(CardService.newNotification()\n          .setText(\"Filtering Complete\"))\n      .build();\n}\n\n\n\n\n\n\n\n\n\n\n/**\n * Updates the labels on the current thread based on \n * user selections. Runs via the OnChangeAction for\n * each CHECK_BOX created.\n *\n * @param {Object} e The data provided by the Gmail UI.\n*/\nfunction toggleLabel(e){\n  var selected \u003d e.formInputs.labels;\n\n  // Activate temporary Gmail add-on scopes.\n  var accessToken \u003d e.messageMetadata.accessToken;\n  GmailApp.setCurrentMessageAccessToken(accessToken);\n\n  var messageId \u003d e.messageMetadata.messageId;\n  var message \u003d GmailApp.getMessageById(messageId);\n  var thread \u003d message.getThread();\n\n  if (selected !\u003d null){\n     for each (var label in GmailApp.getUserLabels()) {\n       if(selected.indexOf(label.getName()) !\u003d -1){\n          thread.addLabel(label);\n       }\n       else {\n         thread.removeLabel(label);\n       }\n     }\n  }\n  else {\n    for each (var label in GmailApp.getUserLabels()) {\n      thread.removeLabel(label);\n    }\n  }\n}\n\n/**\n * Converts an GmailLabel object to a array of strings. \n * Used for easy sorting and to determine if a value exists.\n *\n * @param {labelsObjects} A GmailLabel object array.\n * @return {lables[]} An array of labels names as strings.\n*/\nfunction getLabelArray(labelsObjects){\n  var labels \u003d [];\n  for(var i \u003d 0; i \u003c labelsObjects.length; i++) {\n    labels[i] \u003d labelsObjects[i].getName();\n  }\n  labels.sort();\n  return labels;\n}\n\n\nfunction createRiskLabels(e) {\n  \n  var NumToString \u003d \u00270\u0027;\n  var ConcatString \u003d NumToString + \"% Risk\";\n  \n  \n  \n  \n  for(i \u003d 0; i \u003c 101; i++){\n    NumToString \u003d i.toString();\n    \n    ConcatString \u003d NumToString + \"% Risk\";\n    \n    \n    var response \u003d ({\n    userId : \u0027me\u0027,\n    labelListVisibility   : \u0027labelHide\u0027,\n    messageListVisibility : \u0027hide\u0027,\n    name : ConcatString\n});\n    \n    var response1 \u003d Gmail.Users.Labels.create(response,\u0027me\u0027);\n    \n    \n    /*\n    response.name \u003d ConcatString;\n    response.labelListVisibility \u003d \u0027labelHide\u0027\n    response.messageListVisibility \u003d \u0027hide\u0027\n    \n    \n    var request \u003d (\n    \u0027userId\u0027: \u0027me\u0027,  \n    \u0027label\u0027: {\n      \u0027name\u0027: ConcatString\n    }\n    );\n    */\n    \n    //request.execute();\n    Logger.log(ConcatString);\n  \n  }\n  \n}\n\n\nfunction listLabels() {\n  var response \u003d Gmail.Users.Labels.list(\u0027me\u0027);\n  if (response.labels.length \u003d\u003d 0) {\n    Logger.log(\u0027No labels found.\u0027);\n  } else {\n    Logger.log(\u0027Labels:\u0027);\n    for (var i \u003d 0; i \u003c response.labels.length; i++) {\n      var label \u003d response.labels[i];\n      Logger.log(\u0027- %s\u0027, label.name);\n    }\n  }\n}\n\n\n\n\n\nfunction RemoveAllLabels(){\n  \n\n\n  \n  for(i \u003d 0; i \u003c 101; i++){\n    NumToString \u003d i.toString();\n    \n    ConcatString \u003d NumToString + \"% Risk\";\n      \n    var label \u003d GmailApp.getUserLabelByName(ConcatString);\n    var threads \u003d label.getThreads();\n\n    \n    \n    \n    //Logger.log(label);\n    label.removeFromThreads(threads)\n    //Logger.log(threads.getFirstMessageSubject());\n    \n    \n\n      \n      \n  }\n  \n      defineGlobals();\n  \n      return CardService.newActionResponseBuilder()\n      .setNotification(CardService.newNotification()\n          .setText(\"Removing all labels complete\"))\n      .build();\n  \n}\n\n\n\nfunction FilterIncomingEmails(){\n  \n  Logger.log(PropertiesService.getScriptProperties().getProperty(\u0027filterLightSetting\u0027))\n  Logger.log(PropertiesService.getScriptProperties().getProperty(\u0027filterMediumSetting\u0027))\n  Logger.log(PropertiesService.getScriptProperties().getProperty(\u0027filterStrictSetting\u0027))\n  \n  \n  if(PropertiesService.getScriptProperties().getProperty(\u0027filterMediumSetting\u0027) \u003d\u003d \u0027true\u0027){\n    FilterMedium();\n    \n  }\n  else if(PropertiesService.getScriptProperties().getProperty(\u0027filterLightSetting\u0027) \u003d\u003d \u0027true\u0027){\n    FilterLight();\n  }\n  else if(PropertiesService.getScriptProperties().getProperty(\u0027filterStrictSetting\u0027) \u003d\u003d \u0027true\u0027){\n    FilterStrict();\n  }\n  \n  \n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//\nfunction FilterLight(){\n\n  //loop through all emails\n  for(j \u003d 0; j\u003c50; j++){\n    \n    \n    var thread \u003d GmailApp.getInboxThreads(0,50)[j]; // Get j thread in the inbox\n    var messageContent \u003d thread.getMessages()[0]; // Get first message in the thread, as phishing emails are usually the first message not a chain\n    var messageContentBody \u003d messageContent.getPlainBody();\n    var words \u003d messageContentBody.match(/\\S+/g);\n    //Logger.log(\"There are : \" + words.length + \" in Email: \"+ j);\n    //subject\n    \n    var riskTotal \u003d 0.0;\n    \n    \n    \n    //loop through specified email\n    for(i\u003d0;i\u003cwords.length;i++){\n    \n    if(words[i].match(\"label\")){\n       riskTotal +\u003d 15.17;\n       \n       }\n    if(words[i].match(\"invoice\")){\n       riskTotal +\u003d 13.81;\n       \n       }\n    if(words[i].match(\"post\")){\n       riskTotal +\u003d 11.27;\n       \n       }\n    if(words[i].match(\"document\")){\n       riskTotal +\u003d 10.92;\n       \n       }\n    if(words[i].match(\"postal\")){\n       riskTotal +\u003d 9.8;\n       \n       }\n    if(words[i].match(\"calculations\")){\n       riskTotal +\u003d 8.98;\n       \n       }\n    if(words[i].match(\"copy\")){\n       riskTotal +\u003d 8.93;\n       \n       }\n    if(words[i].match(\"statement\")){\n       riskTotal +\u003d 6.12;\n       \n       }\n    if(words[i].match(\"notification\")){\n       riskTotal +\u003d 23.37;\n       \n       }\n    if(words[i].match(\"alert\")){\n       riskTotal +\u003d 5.80;\n       \n       }\n    if(words[i].match(\"confirmation\")){\n       riskTotal +\u003d 5.81;\n       \n       }\n    if(words[i].match(\"urgent\")){\n       riskTotal +\u003d 20.00;\n       \n       }\n    \n    \n    \n  \n    }\n    \n    //round risk\n    if(riskTotal \u003e 100){\n      riskTotal \u003d 100;\n    }\n    \n    Logger.log(\"Email Subject: \" + messageContent.getSubject());\n    Logger.log( \"Phishing Risk: \"+ riskTotal); // print out the risk for that Email\n    \n    riskTotal \u003d Math.round(riskTotal);\n    var NumToString \u003d riskTotal.toString();\n    \n    var ConcatString \u003d NumToString + \"% Risk\";\n    \n    \n    \n    var label \u003d GmailApp.getUserLabelByName(ConcatString);\n    \n    label.addToThread(thread);\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  }\n  \n  \n  \n\n}\n\nfunction FilterMedium(){\n  \n  //loop through all emails\n  for(j \u003d 0; j\u003c50; j++){\n    \n    \n    var thread \u003d GmailApp.getInboxThreads(0,50)[j]; // Get j thread in the inbox\n    var messageContent \u003d thread.getMessages()[0]; // Get first message in the thread, as phishing emails are usually the first message not a chain\n    var messageContentBody \u003d messageContent.getPlainBody();\n    var words \u003d messageContentBody.match(/\\S+/g);\n    //Logger.log(\"There are : \" + words.length + \" in Email: \"+ j);\n    //subject\n    \n    var messageContentString \u003d String(messageContentBody).toLowerCase();\n    \n    \n    var riskTotal \u003d 0.0;\n    var riskTotalSubject \u003d 0;\n    var riskTotalPhrase \u003d 0;\n    \n    \n    \n    \n    //phrase matching in email contents\n    if(messageContentString.indexOf(\u0027email account\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 8.0;\n    }\n    if(messageContentString.indexOf(\u0027Official Data Breach Notification\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 15.0;\n    }\n    if(messageContentString.indexOf(\u0027password\u0027) \u003e 0 \u0026\u0026 messageContentString.indexOf(\u0027expires\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 30;\n    }\n    if(messageContentString.indexOf(\u0027required immediately\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 15.0;\n    }\n    if(messageContentString.indexOf(\u0027change of password\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 20.0;\n    }\n    if(messageContentString.indexOf(\u0027important\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 10.0;\n    }\n    if(messageContentString.indexOf(\u0027human resources\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 17.0;\n    }\n    if(messageContentString.indexOf(\u0027dear customer\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 15.0;\n    }\n    if(messageContentString.indexOf(\u0027dear member\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 15.0;\n    }\n    if(messageContentString.indexOf(\u0027urgent action\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 30.0;\n    }\n    if(messageContentString.indexOf(\u0027account will be closed\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 30.0;\n    }\n    if(messageContentString.indexOf(\u0027account\u0027) \u003e 0 \u0026\u0026 messageContentString.indexOf(\u0027comprimised\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 50.0;\n    }\n\n    \n    //loop through specified email\n    for(i\u003d0;i\u003cwords.length;i++){\n    \n    if(words[i].match(\"label\")){\n       riskTotal +\u003d 15.17;\n       \n       }\n    if(words[i].match(\"invoice\")){\n       riskTotal +\u003d 13.81;\n       \n       }\n    if(words[i].match(\"post\")){\n       riskTotal +\u003d 11.27;\n       \n       }\n    if(words[i].match(\"document\")){\n       riskTotal +\u003d 10.92;\n       \n       }\n    if(words[i].match(\"postal\")){\n       riskTotal +\u003d 9.8;\n       \n       }\n    if(words[i].match(\"calculations\")){\n       riskTotal +\u003d 8.98;\n       \n       }\n    if(words[i].match(\"copy\")){\n       riskTotal +\u003d 8.93;\n       \n       }\n    if(words[i].match(\"statement\")){\n       riskTotal +\u003d 6.12;\n       \n       }\n    if(words[i].match(\"notification\")){\n       riskTotal +\u003d 23.37;\n       \n       }\n    if(words[i].match(\"alert\")){\n       riskTotal +\u003d 5.80;\n       \n       }\n    if(words[i].match(\"confirmation\")){\n       riskTotal +\u003d 5.81;\n       \n       }\n    if(words[i].match(\"urgent\")){\n       riskTotal +\u003d 20.00;\n       \n       }\n    \n    \n    \n  \n    }\n    \n    \n    \n    \n    //checking the subject line\n    \n    var emailSubject \u003d messageContent.getSubject();\n    emailSubject \u003d String(emailSubject.toLowerCase());\n    Logger.log(\"Email Subject: \" + emailSubject);\n    \n\n    \n    \n    \n    if(emailSubject.indexOf(\u0027data breach\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    \n    if(emailSubject.indexOf(\u0027password\u0027) \u003e -1){\n      if (emailSubject.indexOf(\u0027expire\u0027) \u003e -1){\n      \n        riskTotalSubject +\u003d 30.0;\n      }\n    }\n    \n    if(emailSubject.indexOf(\u0027healthcare\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027policy\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027required immediately\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 50.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027account update\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027change\u0027) \u003e 0 \u0026\u0026 emailSubject.indexOf(\u0027password\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027password expire\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027urgent\u0027) \u003e\u003d 0 || emailSubject.indexOf(\u0027immediate\u0027) \u003e\u003d 0 || emailSubject.indexOf(\u0027require\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 50.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027important update\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 20.0;\n    }\n\n    \n    \n    var finalRiskDet \u003d ((riskTotalSubject * 2 )+ riskTotalPhrase + (riskTotal * 0.75));\n    \n    if(finalRiskDet \u003e 0){\n       finalRiskDet \u003d finalRiskDet / 3;  \n    }\n    \n    if (finalRiskDet \u003e 100.0){\n      finalRiskDet \u003d 100;\n    }\n    \n    \n    Logger.log( \"Phishing Risk for subject: \"+ riskTotalSubject);\n    Logger.log( \"Phishing Risk for phrases: \"+ riskTotalPhrase);\n    Logger.log( \"Phishing Risk for content: \"+ riskTotal); // print out the risk for that Email\n    \n    \n    finalRiskDet \u003d Math.round(finalRiskDet);\n    var NumToString \u003d finalRiskDet.toString();\n    \n    var ConcatString \u003d NumToString + \"% Risk\";\n    \n    \n    \n    var label \u003d GmailApp.getUserLabelByName(ConcatString);\n    \n    label.addToThread(thread);\n    \n    Logger.log( \"Phishing Risk TOTAL: \"+ finalRiskDet);\n    \n    \n    \n  }\n  \n  \n  \n  \n  \n  \n  \n  \n//checking subject line\n\n\n//Phrases\n//Dear Customer, Dear Member\n//\"Urgent action required!\" \"Your account will be closed!\" \"Your account has been compromised!\", \n//    Official Data Breach Notification (14%)\n//    IT Reminder: Your Password Expires in Less Than 24 Hours (12%)\n//    Change of Password Required Immediately (10%)\n//    Please Read Important from Human Resources (10%)\n//    All Employees: Update your Healthcare Info (10%)\n//    Revised Vacation \u0026 Sick Time Policy (8%)\n//    Quick company survey (8%)\n//    Email Account Updates (8%)\n\n\n}\n\nfunction FilterStrict(){\n\n\n  var map \u003d new Array();\n\n  for(j\u003d0; j \u003c 50; j++){\n   \n    var thread \u003d GmailApp.getInboxThreads(0,50)[j]; // Get j thread in the inbox\n    var messageContent \u003d thread.getMessages()[0]; // Get first message in the thread, as phishing emails are usually the first message not a chain\n  \n    //Logger.log(messageContent.getFrom());\n    \n    \n    map.push(messageContent.getFrom());\n    \n    \n      }\n  \n  var trustedContacts \u003d new Array();\n  \n  //loop thru all the senders from X number of emails\n  for(var i in map){\n   // Logger.log(map[i]);\n    var count \u003d 0;\n    var currContact \u003d map[i];\n    \n    for(var k in map){\n      if(currContact \u003d\u003d map[k]){\n        count++;\n      }\n    \n    }\n    \n    //if we have gotten 3 or more emails from a contact, count them as trusted\n     if(count \u003e\u003d 3){\n      if(trustedContacts.indexOf(currContact) \u003d\u003d -1){\n        trustedContacts.push(currContact);\n      }\n    }\n  }\n  \n  Logger.log(\"List of Trusted Contacts: \"+ trustedContacts);\n  \n  \n  //loop through all emails\n  for(j \u003d 0; j\u003c20; j++){\n    \n    \n    var thread \u003d GmailApp.getInboxThreads(0,20)[j]; // Get j thread in the inbox\n    var messageContent \u003d thread.getMessages()[0]; // Get first message in the thread, as phishing emails are usually the first message not a chain\n    var messageContentBody \u003d messageContent.getPlainBody();\n    var words \u003d messageContentBody.match(/\\S+/g);\n    //Logger.log(\"There are : \" + words.length + \" in Email: \"+ j);\n    //subject\n    \n    var messageContentString \u003d String(messageContentBody).toLowerCase();\n    \n    \n    var riskTotal \u003d 0.0;\n    var riskTotalSubject \u003d 0;\n    var riskTotalPhrase \u003d 0;\n    var riskTrustedContact \u003d 0;\n    \n    if(trustedContacts.indexOf(messageContent.getFrom()) \u003d\u003d -1){ //check to see if the email is from a trusted Contact or not\n      Logger.log(\"Email not from trusted contact\" + messageContent.getFrom());\n      riskTrustedContact \u003d 40.0\n    \n    \n    }\n    \n    \n    \n    \n    //phrase matching in email contents\n    if(messageContentString.indexOf(\u0027email account\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 8.0;\n    }\n    if(messageContentString.indexOf(\u0027data breach\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 15.0;\n    }\n    if(messageContentString.indexOf(\u0027password\u0027) \u003e 0 \u0026\u0026 messageContentString.indexOf(\u0027expires\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 30;\n    }\n    if(messageContentString.indexOf(\u0027required immediately\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 15.0;\n    }\n    if(messageContentString.indexOf(\u0027change of password\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 20.0;\n    }\n    if(messageContentString.indexOf(\u0027important\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 10.0;\n    }\n    if(messageContentString.indexOf(\u0027human resources\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 17.0;\n    }\n    if(messageContentString.indexOf(\u0027dear customer\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 15.0;\n    }\n    if(messageContentString.indexOf(\u0027dear member\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 15.0;\n    }\n    if(messageContentString.indexOf(\u0027urgent action\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 30.0;\n    }\n    if(messageContentString.indexOf(\u0027account will be closed\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 30.0;\n    }\n    if(messageContentString.indexOf(\u0027account\u0027) \u003e 0 \u0026\u0026 messageContentString.indexOf(\u0027comprimised\u0027) \u003e 0){\n      riskTotalPhrase +\u003d 50.0;\n    }\n\n    \n    //loop through specified email\n    for(i\u003d0;i\u003cwords.length;i++){\n    \n    if(words[i].match(\"label\")){\n       riskTotal +\u003d 15.17;\n       \n       }\n    if(words[i].match(\"invoice\")){\n       riskTotal +\u003d 13.81;\n       \n       }\n    if(words[i].match(\"post\")){\n       riskTotal +\u003d 11.27;\n       \n       }\n    if(words[i].match(\"document\")){\n       riskTotal +\u003d 10.92;\n       \n       }\n    if(words[i].match(\"postal\")){\n       riskTotal +\u003d 9.8;\n       \n       }\n    if(words[i].match(\"calculations\")){\n       riskTotal +\u003d 8.98;\n       \n       }\n    if(words[i].match(\"copy\")){\n       riskTotal +\u003d 8.93;\n       \n       }\n    if(words[i].match(\"statement\")){\n       riskTotal +\u003d 6.12;\n       \n       }\n    if(words[i].match(\"notification\")){\n       riskTotal +\u003d 23.37;\n       \n       }\n    if(words[i].match(\"alert\")){\n       riskTotal +\u003d 5.80;\n       \n       }\n    if(words[i].match(\"confirmation\")){\n       riskTotal +\u003d 5.81;\n       \n       }\n    if(words[i].match(\"urgent\")){\n       riskTotal +\u003d 20.00;\n       \n       }\n    \n    \n    \n  \n    }\n    \n    \n    \n    \n    //checking the subject line\n    \n    var emailSubject \u003d messageContent.getSubject();\n    emailSubject \u003d String(emailSubject.toLowerCase());\n    Logger.log(\"Email Subject: \" + emailSubject);\n    \n\n    \n    \n    \n    if(emailSubject.indexOf(\u0027data breach\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    \n    if(emailSubject.indexOf(\u0027password\u0027) \u003e -1){\n      if (emailSubject.indexOf(\u0027expire\u0027) \u003e -1){\n      \n        riskTotalSubject +\u003d 30.0;\n      }\n    }\n    \n    if(emailSubject.indexOf(\u0027healthcare\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027policy\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027required immediately\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 50.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027account update\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027change\u0027) \u003e 0 \u0026\u0026 emailSubject.indexOf(\u0027password\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027password expire\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 30.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027urgent\u0027) \u003e\u003d 0 || emailSubject.indexOf(\u0027immediate\u0027) \u003e\u003d 0 || emailSubject.indexOf(\u0027require\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 50.0;\n    }\n    \n    if(emailSubject.indexOf(\u0027important update\u0027) \u003e\u003d 0){\n      riskTotalSubject +\u003d 20.0;\n    }\n\n    \n    \n    var finalRiskDet \u003d ((riskTotalSubject * 2 )+ riskTotalPhrase + (riskTotal * 0.75));\n    \n    if(finalRiskDet \u003e 0){\n       finalRiskDet \u003d finalRiskDet / 3;\n       finalRiskDet +\u003d riskTrustedContact;\n    }\n    \n    if (finalRiskDet \u003e 100.0){\n      finalRiskDet \u003d 100;\n    }\n    \n    \n    Logger.log( \"Phishing Risk for subject: \"+ riskTotalSubject);\n    Logger.log( \"Phishing Risk for phrases: \"+ riskTotalPhrase);\n    Logger.log( \"Phishing Risk for content: \"+ riskTotal); // print out the risk for that Email\n    Logger.log( \"Phishing Risk for trusted Contact: \"+ riskTrustedContact); // print out the risk for that Email\n    Logger.log( \"Phishing Risk TOTAL: \"+ finalRiskDet);\n    \n  \n    finalRiskDet \u003d Math.round(finalRiskDet);\n    var NumToString \u003d finalRiskDet.toString();\n    \n    var ConcatString \u003d NumToString + \"% Risk\";\n    \n    \n    \n    var label \u003d GmailApp.getUserLabelByName(ConcatString);\n    \n    label.addToThread(thread);\n  \n  \n  \n  \n  \n\n  }\n}\n\n\n\n\n\n\n\n\n"},{"id":"584c38ca-ea62-4449-8970-ecf18730de87","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"America/Los_Angeles\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [{\n      \"userSymbol\": \"Gmail\",\n      \"serviceId\": \"gmail\",\n      \"version\": \"v1\"\n    }]\n  },\n  \"oauthScopes\": [\"https://mail.google.com/\", \"https://www.googleapis.com/auth/gmail.addons.execute\", \"https://www.googleapis.com/auth/gmail.labels\", \"https://www.googleapis.com/auth/gmail.modify\"],\n  \"gmail\": {\n    \"name\": \"SmellsPhishy\",\n    \"logoUrl\": \"https://www.gstatic.com/images/icons/material/system/1x/label_googblue_24dp.png\",\n    \"contextualTriggers\": [{\n      \"unconditional\": {\n      },\n      \"onTriggerFunction\": \"buildAddOn\"\n    }],\n    \"primaryColor\": \"#4285F4\",\n    \"secondaryColor\": \"#4285F4\",\n    \"openLinkUrlPrefixes\": [\"https://mail.google.com/\"]\n  }\n}"}]}